# ────────────────────────────────────────────────────────────────
# Cloud Build pipeline for the “quote-api” Cloud Run service
#   • PR trigger  → _TARGET_ENV=staging  → build only
#   • Push-main   → _TARGET_ENV=prod     → build + deploy (+ optional canary)
# ────────────────────────────────────────────────────────────────
steps:
# 1) Build & push image
- id: build-image
  name: gcr.io/cloud-builders/docker
  args:
    - build
    - '--tag=us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:${SHORT_SHA}'
    - '--tag=us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:latest'
    - .

# 2) Push both tags
- id: push-image
  name: gcr.io/cloud-builders/docker
  args:
    - push
    - 'us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:${SHORT_SHA}'
- id: push-latest
  name: gcr.io/cloud-builders/docker
  args:
    - push
    - 'us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:latest'




# 3) Deploy to Cloud Run (ONLY for prod)
- id: deploy-prod
  name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
      if [[ "$_TARGET_ENV" == "prod" ]]; then
        echo "🔄 Deploying to Cloud Run (prod)…"
        gcloud run deploy quote-api \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:latest \
          --revision-suffix=sha-${SHORT_SHA} \
          --region=us-central1 \
          --platform=managed \
          --allow-unauthenticated
      else
        echo "⚠️  Skipping deploy – _TARGET_ENV=$${_TARGET_ENV}"
      fi

# 3) Optional canary split (10 % to new rev) – ONLY for prod
- id: canary-split
  name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
      # Cloud Build substitutions (like $_TARGET_ENV, ${PROJECT_ID}) use single '$'
      if [[ "$_TARGET_ENV" == "prod" ]]; then
        echo "🔍 Fetching latest two revisions for canary split..."

        # For BASH internal variables and command substitution:
        # Use '$$' to ensure Cloud Build passes a literal '$' to bash.
        # Renamed REVISIONS to _cb_revision_list_output for uniqueness.
        _cb_revision_list_output=$$(gcloud run revisions list \
          --service=quote-api \
          --region=us-central1 \
          --platform=managed \
          --sort-by="~metadata.creationTimestamp" \
          --limit=2 \
          --format="value(metadata.name)" \
          --project=${PROJECT_ID}) # ${PROJECT_ID} is a Cloud Build substitution

        # Check if the command to get revisions failed or returned empty
        if [[ -z "$$_cb_revision_list_output" ]]; then
          echo "❌ ERROR: Failed to fetch revision list or list is empty. Skipping canary."
          exit 1
        fi

        # Convert multi-line output to a bash array _cb_rev_array
        mapfile -t _cb_rev_array <<< "$$_cb_revision_list_output"

        # Access array elements using bash syntax, escaping '$' with '$$' for Cloud Build
        _cb_new_revision="$${_cb_rev_array[0]}"
        _cb_previous_stable_revision="" # Default to empty

        if [[ $${#_cb_rev_array[@]} -gt 1 ]]; then
          _cb_previous_stable_revision="$${_cb_rev_array[1]}"
        fi

        # Validate that _cb_new_revision is not empty
        if [[ -z "$$_cb_new_revision" ]]; then
          echo "❌ ERROR: Could not determine new revision name from fetched list. Skipping canary."
          exit 1
        fi

        echo "🆕 New Revision: $$_cb_new_revision"
        if [[ -n "$$_cb_previous_stable_revision" ]]; then
          echo "🕰️ Previous Stable Revision: $$_cb_previous_stable_revision"
          echo "🪄 Applying 10% canary to $$_cb_new_revision, 90% to $$_cb_previous_stable_revision"
          gcloud run services update-traffic quote-api \
            --region=us-central1 \
            --platform=managed \
            --to-revisions="$$_cb_new_revision=10,$$_cb_previous_stable_revision=90" \
            --project=${PROJECT_ID} # Cloud Build substitution
        else
          # Only one revision exists (the new one), so it gets all traffic by default.
          echo "✅ Only one revision exists ($$_cb_new_revision). All traffic (100%) automatically goes to it. No canary split needed."
        fi
      else
        # $_TARGET_ENV is a Cloud Build substitution, so single '$' is correct
        echo "⚠️  Skipping canary – _TARGET_ENV=${_TARGET_ENV}"
      fi

- id: deploy-to-gke-with-helm
  name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:slim' # Or a fuller gcloud-sdk image
  entrypoint: 'bash'
  args:
    - '-c'
    - |
      set -e # Exit immediately if a command exits with a non-zero status.
      set -x # Print commands and their arguments as they are executed.

      echo "Installing kubectl component..."
      gcloud components install kubectl --quiet # Add --quiet to avoid prompts

      echo "Installing Helm client..."
      HELM_VERSION="v3.12.0" 
      curl -fsSL -o get_helm.sh https://raw.githubusercontent.com/helm/helm/main/scripts/get-helm-3
      chmod 700 get_helm.sh
      ./get_helm.sh --version $$HELM_VERSION
      
      echo "Configuring kubectl for GKE cluster..."
      # REPLACE THESE PLACEHOLDERS with your actual cluster name and zone!
      gcloud container clusters get-credentials YOUR_GKE_CLUSTER_NAME \
        --zone YOUR_GKE_CLUSTER_ZONE \
        --project=${PROJECT_ID}
      
      echo "Running helm upgrade..."
      helm upgrade --install quote-api ./charts/quote-api \
        --namespace quote-api \
        --create-namespace \
        --set image.repository=us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api \
        --set image.tag=${SHORT_SHA} \
        --atomic \
        --timeout 5m
      
      echo "Helm deployment completed."
  # waitFor: ['YourAppImagePushStepID']

options:
  logging: CLOUD_LOGGING_ONLY

