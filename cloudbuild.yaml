# ────────────────────────────────────────────────────────────────
# Cloud Build pipeline for the “quote-api” Cloud Run service
#   • PR trigger  → _TARGET_ENV=staging  → build only
#   • Push-main   → _TARGET_ENV=prod     → build + deploy (+ optional canary)
# ────────────────────────────────────────────────────────────────
steps:
# 1) Build & push image
- id: build-image
  name: gcr.io/cloud-builders/docker
  args:
    - build
    - '--tag=us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:${SHORT_SHA}'
    - '--tag=us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:latest'
    - .

# 2) Push both tags
- id: push-image
  name: gcr.io/cloud-builders/docker
  args:
    - push
    - 'us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:${SHORT_SHA}'
- id: push-latest
  name: gcr.io/cloud-builders/docker
  args:
    - push
    - 'us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:latest'



# 3) Deploy to Cloud Run (ONLY for prod)
- id: deploy-prod
  name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
      if [[ "$_TARGET_ENV" == "prod" ]]; then
        echo "🔄 Deploying to Cloud Run (prod)…"
        gcloud run deploy quote-api \
          --image=us-central1-docker.pkg.dev/$PROJECT_ID/quote-api/quote-api:latest \
          --revision-suffix=sha-${SHORT_SHA} \
          --region=us-central1 \
          --platform=managed \
          --allow-unauthenticated
      else
        echo "⚠️  Skipping deploy – _TARGET_ENV=$${_TARGET_ENV}"
      fi


# 3) Optional canary split (10 % to new rev) – ONLY for prod
- id: canary-split
  name: gcr.io/cloud-builders/gcloud
  entrypoint: bash
  args:
    - -c
    - |
      if [[ "$_TARGET_ENV" == "prod" ]]; then
        echo "🔍 Fetching latest two revisions for canary split..."
        # Cloud Build will NOT try to substitute \${REVISIONS}, bash will handle it.
        REVISIONS=$$(gcloud run revisions list \
          --service=quote-api \
          --region=us-central1 \
          --platform=managed \
          --sort-by="~metadata.creationTimestamp" \
          --limit=2 \
          --format="value(metadata.name)")

        # Convert multi-line output to an array
        mapfile -t REV_ARRAY <<< "$$REVISIONS" # Use $$REVISIONS to pass the content to mapfile

        # Access array elements - escape $ for bash variables
        NEW_REVISION="$${REV_ARRAY[0]}"
        PREVIOUS_STABLE_REVISION=""
        if [[ $${#REV_ARRAY[@]} -gt 1 ]]; then # Escape $ for bash variable expansion
          PREVIOUS_STABLE_REVISION="$${REV_ARRAY[1]}"
        fi

        if [[ -z "$$NEW_REVISION" ]]; then # Escape $ for bash variable
          echo "❌ ERROR: Could not fetch new revision name. Skipping canary."
          exit 1 
        fi

        echo "🆕 New Revision: $$NEW_REVISION" # Escape $
        if [[ -n "$$PREVIOUS_STABLE_REVISION" ]]; then # Escape $
          echo "🕰️ Previous Stable Revision: $$PREVIOUS_STABLE_REVISION" # Escape $
          echo "🪄 Applying 10% canary to $$NEW_REVISION, 90% to $$PREVIOUS_STABLE_REVISION" # Escape $
          gcloud run services update-traffic quote-api \
            --region=us-central1 \
            --platform=managed \
            --to-revisions="$$NEW_REVISION=10,$$PREVIOUS_STABLE_REVISION=90" \ # Escape $
            --project=$$PROJECT_ID # $$PROJECT_ID is a Cloud Build substitution, so it's fine
                                   # OR, if you want to be explicit: --project=${PROJECT_ID}
        else
          echo "✅ Only one revision exists ($$NEW_REVISION). All traffic (100%) automatically goes to it. No canary split needed." # Escape $
        fi
      else
        # For _TARGET_ENV, which IS a Cloud Build substitution, you use a single $
        echo "⚠️  Skipping canary – _TARGET_ENV=$_TARGET_ENV" 
        # OR echo "⚠️  Skipping canary – _TARGET_ENV=${_TARGET_ENV}"
      fi
options:
  logging: CLOUD_LOGGING_ONLY

